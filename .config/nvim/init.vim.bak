set runtimepath+=~/.config/nvim,~/.config/nvim/after
set packpath+=~/.config/nvim

" VUNDLE SETUP
set nocompatible " be iMproved, vundle required
filetype off " vundle required

" set the runtime path to include Vundle and initialize
set rtp+=~/.config/nvim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" == Add Vundle plugins here ==
Plugin    'Valloric/YouCompleteMe'
Plugin   'caigithub/a_indent'
Plugin     'mileszs/ack.vim'
Plugin        'kien/ctrlp.vim'
Plugin    'junegunn/fzf'
Plugin    'junegunn/fzf.vim'
Plugin   'equalsraf/neovim-gui-shim'
Plugin  'scrooloose/nerdtree'
Plugin   'godlygeek/tabular'
Plugin  'majutsushi/tagbar'
Plugin      'SirVer/ultisnips'
Plugin      'mbbill/undotree'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin    'Lokaltog/vim-easymotion'
Plugin     'terryma/vim-expand-region'
Plugin       'tpope/vim-fugitive'
Plugin    'airblade/vim-gitgutter'
Plugin    'inkarkat/vim-ingo-library'
Plugin      'ivanov/vim-ipython'
Plugin    'inkarkat/vim-mark'
Plugin     'sheerun/vim-polyglot'
Plugin    'pboettch/vim-highlight-cursor-words'
"Plugin 'arakashic/chromatica.nvim'

"Haskell stuff
"Plugin 'scrooloose/syntastic'
"Plugin 'bitc/vim-hdevtools'
"Plugin 'eagletmt/ghcmod-vim'
"Plugin 'neovimhaskell/haskell-vim'

" =============================

call vundle#end()
"filetype plugin indent on
" END VUNDLE SETUP

filetype plugin indent on

let g:polyglot_disabled = ['c/c++', 'c++11']

"set guifont=Input\ Medium\ 12
set exrc
set secure
let mapleader = '\'

syntax on
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set cursorline
set cino=g0,:0,N-s,i4,(0,j1,w1,W2s
set dir=/tmp " swap file directory
set guioptions-=T
set wildmode=longest,list,full
set wildmenu

set colorcolumn=80
highlight ColorColumn ctermbg=darkgray
set formatoptions+=t
set textwidth=79

let &path.="src/include,/usr/include,"

set makeprg=make\ -j9

autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

function! Refactor()
    call inputsave()
    let @z=input("What do you want to rename '" . @z . "' to? ")
    call inputrestore()
endfunction

" Locally (local to block) rename a variable
nmap <Leader>rv "zyiw:call Refactor()<cr>mx:silent! norm gd<cr>:%s/<C-R>//<c-r>z/g<cr>`x

noremap <C-F4> :MBEbd<cr>
nmap <F7> :TagbarOpenAutoClose<cr>
nmap <F8> :TagbarToggle<cr>
nnoremap <F9> :make!<cr>
nnoremap <C-PageUp> :MBEbp<cr>
inoremap <C-PageUp> <esc>:MBEbp<cr>
nnoremap <C-PageDown> :MBEbn<cr>
inoremap <C-PageDown> <esc>:MBEbn<cr>
nnoremap <F5> :YcmForceCompileAndDiagnostics<cr><cr>
inoremap <F5> <esc>:YcmForceCompileAndDiagnostics<cr><cr>
nnoremap <F11> :MBEbp<cr>
inoremap <F11> <esc>:MBEbp<cr>
nnoremap <F12> :MBEbn<cr>
inoremap <F12> <esc>:MBEbn<cr>
noremap <C-TAB> :MBEbf<cr>
noremap <C-S-TAB> :MBEbb<cr>
inoremap jk <esc>
nnoremap <leader>. :CtrlPTag<cr>
nnoremap <leader>jj :YcmCompleter GoTo<cr>
nnoremap <leader>jd :YcmCompleter GoToDefinition<cr>
nnoremap <leader>jt :YcmCompleter GoToDeclaration<cr>
nnoremap <leader>ji :YcmCompleter GoToInclude<cr>
nnoremap <leader>t :YcmCompleter GetType<cr>
nnoremap <leader>f :YcmCompleter FixIt<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>o :Files<cr>
tnoremap <A-h> <C-\><C-n><C-w>h
tnoremap <A-j> <C-\><C-n><C-w>j
tnoremap <A-k> <C-\><C-n><C-w>k
tnoremap <A-l> <C-\><C-n><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
nnoremap <C-j> <C-e>
nnoremap <C-k> <C-y>
nmap , <Plug>(easymotion-s)
vmap , <Plug>(easymotion-s)

"nmap <Leader><Leader> V
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" airline always on
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tagbar#enabled = 0
let g:airline_theme="murmur"
let g:airline_section_y=''
let g:airline_powerline_fonts = 1

colorscheme zenburn

hi CursorLine guibg=#333
augroup BgHighlight
  autocmd!
  autocmd WinEnter * set cul
  autocmd WinLeave * set nocul
augroup END

set hls
set ic
set autowriteall
set mouse=a
set hidden
set nu
set wrap
set textwidth=78
set incsearch

let g:UltiSnipsExpandTrigger = "<c-d>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

let g:ycm_always_populate_location_list = 1
let g:ycm_echo_current_diagnostic = 1

set updatetime=250

let g:ackprg = 'ag --vimgrep'

" Remove trailing whitespace on save
autocmd BufWritePre *.cpp :%s/\s\+$//e
autocmd BufWritePre *.cc :%s/\s\+$//e
autocmd BufWritePre *.hpp :%s/\s\+$//e
autocmd BufWritePre *.h :%s/\s\+$//e
autocmd FileType make setlocal noexpandtab

" Visible vs. physical line movement

" mapping to make movements operate on 1 screen line in wrap mode
function! ScreenMovement(movement)
  if &wrap
    if exists("b:gmove")
      if b:gmove == 'yes'
        return "g" . a:movement
      else
        return a:movement
      endif
    else
      return a:movement
    endif
  else
    return a:movement
  endif
endfunction

onoremap <silent> <expr> j ScreenMovement("j")
onoremap <silent> <expr> k ScreenMovement("k")
onoremap <silent> <expr> 0 ScreenMovement("0")
onoremap <silent> <expr> ^ ScreenMovement("^")
onoremap <silent> <expr> $ ScreenMovement("$")
nnoremap <silent> <expr> j ScreenMovement("j")
nnoremap <silent> <expr> k ScreenMovement("k")
nnoremap <silent> <expr> 0 ScreenMovement("0")
nnoremap <silent> <expr> ^ ScreenMovement("^")
nnoremap <silent> <expr> $ ScreenMovement("$")
vnoremap <silent> <expr> j ScreenMovement("j")
vnoremap <silent> <expr> k ScreenMovement("k")
vnoremap <silent> <expr> 0 ScreenMovement("0")
vnoremap <silent> <expr> ^ ScreenMovement("^")
vnoremap <silent> <expr> $ ScreenMovement("$")
vnoremap <silent> <expr> j ScreenMovement("j")

" toggle showbreak
function! TYShowBreak()
  if &showbreak == ''
    set showbreak=>
  else
    set showbreak=
  endif
endfunction
let b:gmove = "yes"
function! TYToggleBreakMove()
  if exists("b:gmove") && b:gmove == "yes"
    let b:gmove = "no"
  else
    let b:gmove = "yes"
  endif
endfunction
nmap  <expr> ,b  TYShowBreak()
nmap  <expr> ,bb  TYToggleBreakMove()

" Syntastic settings
set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:synastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {"mode": "passive", "active_filetypes": ["haskell"], "passive_filetypes": ["cpp"] }

map <silent> tu :call GHC_BrowseAll()<CR>
map <silent> tw :call GHC_ShowType()<CR>

au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
au FileType haskell nnoremap <buffer> <silent> <F2> :HdevtoolsClear<CR>
au FileType haskell nnoremap <buffer> <silent> <F3> :HdevtoolsInfo<CR>

" CtrlP ignore paths
let g:ctrlp_custom_ignore = {
      \ 'dir': '\W\.git$\|build$',
      \ 'file': '\.exe$\|\.so$\|\.o'
      \ }

au BufReadPost *.launch set filetype=xml
au BufReadPost *.xacro set filetype=xml
au BufReadPost *.urdf set filetype=xml

" GitGutter
let g:gitgutter_sign_added = '█'
let g:gitgutter_sign_modified = '█'
let g:gitgutter_sign_removed = '█'
let g:gitgutter_sign_removed_first_line = '▲'
let g:gitgutter_sign_modified_removed = '█'

" vebugger
let g:vebugger_leader='<Leader>d'
let g:vebubger_path_gdb='arm-none-eabi-gdb'

autocmd FileType c,cpp set comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,bO:///,O://

" Add highlighting for function definition in C++
function! EnhanceCppSyntax()
  syn match cppFuncDef "::\~\?\zs\h\w*\ze([^)]*\()\s*\(const\)\?\)\?$"
  hi def link cppFuncDef Special
endfunction

autocmd Syntax cpp call EnhanceCppSyntax()

" Chromatica
let g:chromatica#libclang_path='/usr/lib/llvm-4.0/lib/libclang.so'

" Highlight cursor words
let g:HiCursorWords_delay = 500
let g:HiCursorWords_linkStyle='TabLineFill'
